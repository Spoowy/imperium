(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{125:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var r=t(1),a=t(6),i=(t(138),t(137)),c={id:"serverModule",title:"Server Module Definition",sidebar_label:"Server Module"},o={id:"old/serverModule",title:"Server Module Definition",description:"Modules can provide server-side logic.",source:"@site/../docs/old/ServerModule.md",permalink:"/imperium/docs/old/serverModule",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/../docs/old/ServerModule.md",sidebar_label:"Server Module"},l=[{value:"name",id:"name",children:[]},{value:"environment",id:"environment",children:[]},{value:"middleware",id:"middleware",children:[]},{value:"endpoints",id:"endpoints",children:[]},{value:"context",id:"context",children:[]},{value:"startup",id:"startup",children:[]},{value:"GraphQL",id:"graphql",children:[]},{value:"schema",id:"schema",children:[]},{value:"schemaDirectives",id:"schemadirectives",children:[]},{value:"resolvers",id:"resolvers",children:[]}],s={rightToc:l};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Modules can provide server-side logic."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"export default function MyModuleName() {\n    return {\n        // Required\n        name,           // [String] Name of the module\n\n        // Core\n        environment,    // [Function] Imperium environment\n        middleware,     // [Function] Express middleware\n        endpoints,      // [Function] Express endpoints\n        context,         // [Function] This function runs for every request. Return a map of context-specific instances. (ie. Dataloaders).\n        startup,        // [Function] Startup function      \n        \n        // Graphql\n        schema,           // Graphql Schema\n        schemaDirectives, // Graphql Schema Directives\n        resolvers,        // Graphql Resolvers\n    };\n}\n")),Object(i.b)("h2",{id:"name"},"name"),Object(i.b)("p",null,"The string name of the module. You can import directly from the ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," file if you want."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const {name} = require('./package.json');\n")),Object(i.b)("h2",{id:"environment"},"environment"),Object(i.b)("p",null,"A function that returns an object of strings, numbers or booleans or objects of the same.\nThis object can provide environment variables to the entire Imperium app."),Object(i.b)("p",null,"Environment is processed in the ",Object(i.b)("inlineCode",{parentName:"p"},"ImperiumServer")," constructor."),Object(i.b)("p",null,"The main use-case for this is because accessing ",Object(i.b)("inlineCode",{parentName:"p"},"process.env")," makes a C call every time and can potentially slow things down."),Object(i.b)("h2",{id:"middleware"},"middleware"),Object(i.b)("p",null,"A function that returns an object. This object should provide Express middleware that can be\ncalled from any endpoint. The object's keys can be referenced from every endpoint."),Object(i.b)("p",null,"Each keyed function should return a standard Express middleware handler."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"function middleware() {\n    return {\n        myCustomMiddleware() {\n          return (req, res, next) => {\n            next();\n          };\n        },\n        myCustomMiddlewareWithOptions(server: ImperiumServer) {\n            return (req, res, next) => {\n                next();\n            };\n        }\n    };\n}\n")),Object(i.b)("p",null,"Some middleware is already available by default:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"contextManagerMiddleware")," - Provides a ",Object(i.b)("inlineCode",{parentName:"li"},"ContextManager")," instance on every ",Object(i.b)("inlineCode",{parentName:"li"},"req")," object at ",Object(i.b)("inlineCode",{parentName:"li"},"req.contextManager"),".")),Object(i.b)("h4",{id:"server"},Object(i.b)("inlineCode",{parentName:"h4"},"server")),Object(i.b)("p",null,"A reference to the current ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/imperium/docs/old/imperiumServer"}),"ImperiumServer")," instance."),Object(i.b)("h2",{id:"endpoints"},"endpoints"),Object(i.b)("p",null,"A function that can be used to create additional Express endpoints."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"function endpoints(server: ImperiumServer) {\n    server.app.use(...);\n}\n")),Object(i.b)("h4",{id:"server-1"},Object(i.b)("inlineCode",{parentName:"h4"},"server")),Object(i.b)("p",null,"A reference to the current ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/imperium/docs/old/imperiumServer"}),"ImperiumServer")," instance."),Object(i.b)("h2",{id:"context"},"context"),Object(i.b)("p",null,"This function is called for every single request. This allows DataLoader's to be created new for every request."),Object(i.b)("p",null,"It has the following signature:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"function context(server, contextManager) {\n    return {\n        MyDataloader: new DataLoader(ids => MyModel.find({_id: {$in: ids}}).exec()),\n    };\n}\n")),Object(i.b)("h4",{id:"server-2"},Object(i.b)("inlineCode",{parentName:"h4"},"server")),Object(i.b)("p",null,"An ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/imperium/docs/old/imperiumServer"}),"ImperiumServer")," instance."),Object(i.b)("h4",{id:"contextmanager"},Object(i.b)("inlineCode",{parentName:"h4"},"contextManager")),Object(i.b)("p",null,"A ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"ContextManager.md"}),"ContextManager")," instance that has access to all context and authentication information."),Object(i.b)("h2",{id:"startup"},"startup"),Object(i.b)("p",null,"A function that returns a Promise. It is called once (for each worker) on server startup. The value returned\nis not used."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"async function startup(server: ImperiumServer) {\n    \n}\n")),Object(i.b)("h4",{id:"server-3"},Object(i.b)("inlineCode",{parentName:"h4"},"server")),Object(i.b)("p",null,"An ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/imperium/docs/old/imperiumServer"}),"ImperiumServer")," instance."),Object(i.b)("hr",null),Object(i.b)("h2",{id:"graphql"},"GraphQL"),Object(i.b)("h2",{id:"schema"},"schema"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Used by the ",Object(i.b)("inlineCode",{parentName:"em"},"@imperium/graphql")," package.")),Object(i.b)("p",null,"An array of GraphQL schema that represent the server schema, usually imported from ",Object(i.b)("inlineCode",{parentName:"p"},".graphqls")," files."),Object(i.b)("h2",{id:"schemadirectives"},"schemaDirectives"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Used by the ",Object(i.b)("inlineCode",{parentName:"em"},"@imperium/graphql")," package.")),Object(i.b)("p",null,"An object containing GraphQL schema directives."),Object(i.b)("h2",{id:"resolvers"},"resolvers"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Used by the ",Object(i.b)("inlineCode",{parentName:"em"},"@imperium/graphql")," package.")),Object(i.b)("p",null,"A function that returns a GraphQL resolvers object. Will merge all ",Object(i.b)("inlineCode",{parentName:"p"},"Query"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Mutation")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Subscription")," keys."))}b.isMDXComponent=!0}}]);